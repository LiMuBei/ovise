# -*- python -*-

import os
import platform

myplatform = platform.system()

## Functions
def printDbg(e):
    print 'CCFLAGS:'
    print e['CCFLAGS']
    print 'CPPPATH:'
    print e['CPPPATH']
    print 'LIBPATH:'
    print e['LIBPATH']
    print 'LIBS:'
    print e['LIBS']

### Setting up environment

env = Environment()
if ARGUMENTS.get('verbose') != "1":
    env['CCCOMSTR'] = "Compiling $TARGET"
    env['LINKCOMSTR'] = "Linking $TARGET"

conf = Configure(env)
if not env.GetOption('clean'):
    if(myplatform == 'Linux'):
        if not conf.CheckLib('OgreMain'):
            Exit(1)
        if not conf.CheckLib('xerces-c'):
            Exit(1)
env = conf.Finish()

dbgenv = env.Clone()

## wxWidgets
# command for include flags
if(myplatform == 'Linux'):
    wxflags_cmd = '/usr/bin/wx-config --cxxflags --libs'
else:
    wxflags_cmd = '/Users/martinloesch/Source/local/bin/wx-config --cxxflags --libs'
env.ParseConfig(wxflags_cmd)

## Ogre3D
if(myplatform == 'Linux'):
    linux_ogre_include_path = {'CPPPATH':'/usr/local/include/OGRE'}
    env.MergeFlags(linux_ogre_include_path)

    linux_ogre_lib_path = {'LIBPATH':['/usr/local/lib']}
    env.MergeFlags(linux_ogre_lib_path)

    linux_ogre_libraries = {'LIBS':'OgreMain'}
    env.MergeFlags(linux_ogre_libraries)

    linux_ogre_plugin_path = {'LIBPATH':['/usr/local/lib/OGRE']}
    env.MergeFlags(linux_ogre_plugin_path)
else:
    mac_ogre_include_path = {'CCFLAGS':'-F/org/opt/OgreSDK/Dependencies'}
    env.MergeFlags(mac_ogre_include_path)
    mac_ogre_lib_flags = {'LIBS':['-framework Ogre', '-framework Cg', '-framework Carbon']}
    env.MergeFlags(mac_ogre_lib_flags)

## Xerces
xerces_lib = {'LIBS':'xerces-c'}
env.MergeFlags(xerces_lib)

## PropertyGrid
if(myplatform == 'Linux'):
    property_grid_lib = {'LIBS':['wxcode_gtk2u_propgrid-2.8']}
else:
    property_grid_lib = {'LIBS':['']}
env.MergeFlags(property_grid_lib)

## Local
if(myplatform == 'Linux'):
    linux_paths_to_local_includes = {'CPPPATH':['/home/staff/akasper/include']}
    env.MergeFlags(linux_paths_to_local_includes)

    linux_include_paths = {'CPPPATH': Split('''.
                                           ./dotScene''')}
    env.MergeFlags(linux_include_paths)

    linux_paths_to_local_libs = {'LIBPATH':'/home/staff/akasper/lib'}
    env.MergeFlags(linux_paths_to_local_libs)
else:
    mac_paths_to_local_includes = {'CPPPATH':['/Users/martinloesch/Source/local/include/']}
    env.MergeFlags(mac_paths_to_local_includes)

    mac_paths_to_local_libs = {'LIBPATH':['/Users/martinloesch/Source/local/lib']}
    env.MergeFlags(mac_paths_to_local_libs)

    mac_include_paths = {'CPPPATH': Split('''.
                                         ./dotScene''')}
    env.MergeFlags(mac_include_paths)

## System
if(myplatform == 'Linux'):
    linux_project_cc_flags = {'CCFLAGS':Split('''-c
                                                -Wno-non-virtual-dtor
                                                -Wno-reorder
                                                -MD
                                                -fno-common''')}
    env.MergeFlags(linux_project_cc_flags)

    linux_platform_include_paths = {'CPPPATH': Split('''/usr/include/gtk-2.0
                                                        /usr/lib/gtk-2.0/include
                                                        /usr/include/cairo
                                                        /usr/include/glib-2.0
                                                        /usr/lib/glib-2.0/include
                                                        /usr/include/pango-1.0
                                                        /usr/include/atk-1.0
                                                        /usr/lib/atk-1.0/include''')}
    env.MergeFlags(linux_platform_include_paths)

    linux_platform_libraries = {'LIBS':['gcc', 'GL']}
    env.MergeFlags(linux_platform_libraries)
else:
    mac_platform_include_paths = {'CPPPATH':['']}
    env.MergeFlags(mac_platform_include_paths)

    mac_platform_libraries = {'LIBS':['gcc', 'System', 'stdc++', 'SystemStubs']}
    env.MergeFlags(mac_platform_libraries)

## Input files
if(myplatform == 'Linux'):
    input_files = Glob('*.cpp')
    input_files += Glob('dotScene/*.cpp')
else:
    input_files = Glob('*.cpp')
    input_files += Glob('dotScene/*.cpp')

## Debug
#printDbg(env)

### Build
progOvise = env.Program('OViSE', input_files)

